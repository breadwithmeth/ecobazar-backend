model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int     @id @default(autoincrement())
  telegram_user_id String  @unique
  phone_number     String?
  addresses        UserAddress[]
  role             Role    @default(CUSTOMER)
  orders           Order[]
  name             String?
  stockMovements   StockMovement[] @relation("AdminStockMovements")
  deliveredOrders  Order[] @relation("CourierOrders")
  ownedStore       Store? @relation("StoreOwner")
  storeConfirmations StoreOrderConfirmation[] @relation("StoreConfirmations")
  deliveryRatings  DeliveryRating[] // Оценки, поставленные пользователем
  receivedRatings  DeliveryRating[] @relation("CourierRatings") // Оценки, полученные курьером
}

model UserAddress {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userId], references: [id])
  userId    Int
  address   String
}

enum Role {
  ADMIN
  CUSTOMER
  COURIER
  SELLER
}

enum DeliveryType {
  ASAP        // Как можно быстрее
  SCHEDULED   // Запланированная доставка
}

model Store {
  id      Int      @id @default(autoincrement())
  name    String
  address String
  products Product[]
  owner   User?    @relation("StoreOwner", fields: [ownerId], references: [id])
  ownerId Int?     @unique
  orderConfirmations StoreOrderConfirmation[]
}

model Product {
  id      Int      @id @default(autoincrement())
  name    String
  price   Float
  image   String?
  isVisible Boolean @default(true) // видимость товара
  store   Store    @relation(fields: [storeId], references: [id])
  storeId Int
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  stockMovements StockMovement[]
  orderItems OrderItem[]
  unit    String? // единица измерения (например: kg, pcs, l)
}

model StockMovement {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  type      StockMovementType
  comment   String?
  createdAt DateTime @default(now())
  admin     User     @relation("AdminStockMovements", fields: [adminId], references: [id])
  adminId   Int
}

enum StockMovementType {
  INCOME
  OUTCOME
  CORRECTION
}

model Order {
  id              Int         @id @default(autoincrement())
  user            User        @relation(fields: [userId], references: [id])
  userId          Int
  address         String?
  createdAt       DateTime    @default(now())
  items           OrderItem[]
  statuses        OrderStatus[]
  courier         User?       @relation("CourierOrders", fields: [courierId], references: [id])
  courierId       Int?
  deliveryType    DeliveryType @default(ASAP)
  scheduledDate   DateTime?    // Дата и время доставки (если deliveryType = SCHEDULED)
  deliveryRating  DeliveryRating? // Оценка доставки
}

model OrderStatus {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  status    String
  createdAt DateTime @default(now())
}

// ...удалено, теперь OrderStatus — история статусов заказа...

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float?
  storeConfirmation StoreOrderConfirmation?
}

model StoreOrderConfirmation {
  id          Int      @id @default(autoincrement())
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId Int      @unique
  store       Store    @relation(fields: [storeId], references: [id])
  storeId     Int
  status      StoreConfirmationStatus @default(PENDING)
  confirmedQuantity Int?
  notes       String?
  confirmedAt DateTime?
  confirmedBy User?    @relation("StoreConfirmations", fields: [confirmedById], references: [id])
  confirmedById Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum StoreConfirmationStatus {
  PENDING     
  CONFIRMED   
  PARTIAL     
  REJECTED    
}

model TelegramUserState {
  id               Int      @id @default(autoincrement())
  telegram_user_id String   @unique
  state            String   // 'waiting_quantity_input', 'idle', etc.
  data             Json?    // Дополнительные данные (confirmationId, productName, etc.)
  createdAt        DateTime @default(now())
  expiresAt        DateTime
  
  @@index([expiresAt])
}

model DeliveryRating {
  id          Int      @id @default(autoincrement())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  courier     User?    @relation("CourierRatings", fields: [courierId], references: [id])
  courierId   Int?
  quality     Int      // Оценка качества (1-5)
  speed       Int      // Оценка скорости (1-5)
  impression  Int      // Общее впечатление (1-5)
  comment     String?  // Дополнительный комментарий
  createdAt   DateTime @default(now())
}
