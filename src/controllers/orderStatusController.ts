import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import { AuthRequest } from '../middlewares/auth';
import { telegramService } from '../services/telegramService';

const prisma = new PrismaClient();

// –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (PUT /api/orders/:id/status)
export const updateOrderStatus = async (req: AuthRequest, res: Response) => {
  const { id } = req.params;
  const { status } = req.body;
  if (!req.user || req.user.role !== 'ADMIN') return res.status(403).json({ message: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  const allowed = ['NEW', 'WAITING_PAYMENT', 'PREPARING', 'DELIVERING', 'DELIVERED', 'CANCELLED'];
  if (!allowed.includes(status)) {
    return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å' });
  }
  const order = await prisma.order.findUnique({ where: { id: Number(id) } });
  if (!order) return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
  await prisma.orderStatus.create({ data: { orderId: Number(id), status } });
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
  try {
    console.log(`üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #${id} –Ω–∞ ${status}`);
    await telegramService.sendOrderStatusNotification(Number(id), status);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ:', error);
  }
  
  // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ DELIVERED, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É
  if (status === 'DELIVERED') {
    try {
      console.log(`üìä –ó–∞–∫–∞–∑ #${id} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏`);
      await telegramService.sendRatingRequest(Number(id));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ü–µ–Ω–∫—É:', error);
    }
  }
  
  res.json({ success: true });
};

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–∞
export const getOrderStatuses = async (req: Request, res: Response) => {
  const { orderId } = req.params;
  const statuses = await prisma.orderStatus.findMany({
    where: { orderId: Number(orderId) },
    orderBy: { createdAt: 'asc' },
    select: { id: true, status: true, createdAt: true },
  });
  res.json(statuses);
};

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (—Ç–æ–ª—å–∫–æ ADMIN)
export const addOrderStatus = async (req: AuthRequest, res: Response) => {
  const { orderId } = req.params;
  const { status } = req.body;
  if (!req.user || req.user.role !== 'ADMIN') return res.status(403).json({ message: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  if (!status) return res.status(400).json({ message: 'status –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
  const order = await prisma.order.findUnique({ where: { id: Number(orderId) } });
  if (!order) return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  const newStatus = await prisma.orderStatus.create({
    data: {
      orderId: order.id,
      status,
    },
  });
  res.status(201).json(newStatus);
};
