import TelegramBot, { CallbackQuery, Message } from 'node-telegram-bot-api';
import prisma from '../lib/prisma';
import { AppError } from '../middlewares/errorHandler';

interface PendingQuantityInput {
  confirmationId: number;
  productName: string;
  maxQuantity: number;
}

export class TelegramNotificationService {
  private bot: TelegramBot | null = null;
  private isProduction: boolean = false;

  constructor() {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token) {
      console.warn('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.');
      return;
    }

    this.isProduction = process.env.NODE_ENV === 'production';
    this.bot = new TelegramBot(token, { 
      polling: true, // –í–∫–ª—é—á–∞–µ–º polling –≤–æ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–∞—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback queries
      webHook: false 
    });

    console.log('ü§ñ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å polling:', true);
    this.setupBotHandlers();
    this.startCleanupTask();
  }

  private setupBotHandlers() {
    if (!this.bot) return;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    this.bot.on('callback_query', async (query: CallbackQuery) => {
      console.log('üîî –ü–æ–ª—É—á–µ–Ω callback query:', {
        id: query.id,
        data: query.data,
        from: query.from?.username || query.from?.id
      });
      
      try {
        if (!query.data || !query.message) {
          console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç data –∏–ª–∏ message –≤ callback query');
          return;
        }

        const [action, confirmationId, status, quantity] = query.data.split(':');
        console.log('üìä –ü–∞—Ä—Å–∏–Ω–≥ callback data:', { action, confirmationId, status, quantity });
        
        if (action === 'confirm_item') {
          await this.handleItemConfirmation(
            parseInt(confirmationId),
            status as 'CONFIRMED' | 'PARTIAL' | 'REJECTED',
            quantity ? parseInt(quantity) : undefined,
            query
          );
        } else if (action === 'courier_delivered') {
          const orderId = parseInt(confirmationId);
          const courierId = parseInt(status);
          await this.handleCourierDelivery(orderId, courierId, query);
        } else if (action === 'rate_delivery') {
          const orderId = parseInt(confirmationId);
          await this.handleRatingStart(query, orderId);
        } else if (action === 'quality_rating') {
          const orderId = parseInt(confirmationId);
          const quality = parseInt(status);
          const chatId = query.from.id.toString();
          await this.sendSpeedRating(chatId, orderId, quality);
        } else if (action === 'speed_rating') {
          const orderId = parseInt(confirmationId);
          const quality = parseInt(status);
          const speed = parseInt(quantity || '0');
          const chatId = query.from.id.toString();
          await this.sendImpressionRating(chatId, orderId, quality, speed);
        } else if (action === 'impression_rating') {
          const [, orderIdStr, qualityStr, speedStr, impressionStr] = query.data.split(':');
          const orderId = parseInt(orderIdStr);
          const quality = parseInt(qualityStr);
          const speed = parseInt(speedStr);
          const impression = parseInt(impressionStr);
          const chatId = query.from.id.toString();
          await this.finalizeRating(chatId, orderId, quality, speed, impression);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query:', error);
        if (this.bot) {
          await this.bot.answerCallbackQuery(query.id, {
            text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            show_alert: true
          });
        }
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    this.bot.on('message', async (msg: Message) => {
      try {
        if (!msg.text || msg.text.startsWith('/') || !msg.from) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const pendingInput = await this.checkPendingQuantityInput(msg.from.id.toString());
        if (pendingInput) {
          await this.handleQuantityInput(msg, pendingInput);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    });
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
   */
  private startCleanupTask() {
    // –û—á–∏—â–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(async () => {
      try {
        await prisma.telegramUserState.deleteMany({
          where: {
            expiresAt: {
              lte: new Date()
            }
          }
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π:', error);
      }
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
   */
  async sendNewOrderNotifications(orderId: number) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ —Ç–æ–≤–∞—Ä–∞—Ö
      const order = await prisma.order.findUnique({
        where: { id: orderId },
        include: {
          user: {
            select: { name: true, telegram_user_id: true, phone_number: true }
          },
          items: {
            include: {
              product: {
                select: { 
                  id: true, 
                  name: true, 
                  price: true, 
                  image: true,
                  storeId: true,
                  store: {
                    select: { 
                      id: true, 
                      name: true
                    }
                  }
                }
              }
            }
          }
        }
      });

      if (!order) {
        throw new AppError('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω', 404);
      }

      // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏–∑ –∑–∞–∫–∞–∑–∞
      const storeIds = [...new Set(order.items.map(item => item.product.storeId))];
      console.log('üè™ –ú–∞–≥–∞–∑–∏–Ω—ã –≤ –∑–∞–∫–∞–∑–µ:', storeIds);

      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ (SELLER) –¥–ª—è —ç—Ç–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
      const sellers = await prisma.user.findMany({
        where: {
          role: 'SELLER',
          ownedStore: {
            id: { in: storeIds }
          }
        },
        include: {
          ownedStore: {
            select: {
              id: true,
              name: true
            }
          }
        }
      });

      console.log('üë• –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü—ã:', sellers.map(s => ({
        id: s.id,
        name: s.name,
        role: s.role,
        storeId: s.ownedStore?.id,
        storeName: s.ownedStore?.name,
        telegram: s.telegram_user_id
      })));

      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (ADMIN)
      const admins = await prisma.user.findMany({
        where: { role: 'ADMIN' },
        select: { telegram_user_id: true }
      });
      console.log('üë• –ù–∞–π–¥–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:', admins.map(a => a.telegram_user_id));

      await Promise.all(
        admins.map(admin => {
          if (admin.telegram_user_id) {
            this.sendAdminOrderNotification(order, "", order.items, admin.telegram_user_id);
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É ${admin.telegram_user_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.id}`) ;
            return this.bot?.sendMessage(admin.telegram_user_id, `–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å ID: ${order.id}`);
          }
        })
      );




      console.log('üë• –ù–∞–π–¥–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:', admins.map(a => a.telegram_user_id));

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
      const storeGroups = new Map<number, any[]>();
      
      for (const item of order.items) {
        const storeId = item.product.storeId;
        if (!storeGroups.has(storeId)) {
          storeGroups.set(storeId, []);
        }
        storeGroups.get(storeId)!.push(item);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–¥–∞–≤—Ü—É —Ç–æ–ª—å–∫–æ –¥–ª—è –µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
      const notifications = sellers.map(async (seller) => {
        if (!seller.telegram_user_id || !seller.ownedStore) {
          console.warn(`–ü—Ä–æ–¥–∞–≤–µ—Ü ${seller.name} (ID: ${seller.id}) –Ω–µ –∏–º–µ–µ—Ç Telegram ID –∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω–∞`);
          return;
        }

        const storeId = seller.ownedStore.id;
        const itemsForStore = storeGroups.get(storeId);
        
        if (!itemsForStore || itemsForStore.length === 0) {
          console.warn(`–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ ${seller.ownedStore.name} (ID: ${storeId})`);
          return;
        }

        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É ${seller.name} –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ ${seller.ownedStore.name}`);
        
        return this.sendStoreOrderNotification(order, seller.ownedStore, itemsForStore, seller.telegram_user_id);
      });

      await Promise.all(notifications.filter(Boolean));
      console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
      
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–µ:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–æ–¥–∞–≤—Ü—É
   */
  private async sendStoreOrderNotification(
    order: any, 
    store: any, 
    items: any[], 
    telegramUserId: string
  ) {
    if (!this.bot) return;

    try {
      const customerName = order.user.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å';
      const customerPhone = order.user.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω';
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      let message = `üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id}*\n\n`;
      message += `üè™ *–ú–∞–≥–∞–∑–∏–Ω:* ${store.name}\n`;
      message += `üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* ${customerName}\n`;
      message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${customerPhone}\n`;
      message += `üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* ${order.address}\n\n`;
      message += `üì¶ *–¢–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:*\n`;

      let totalAmount = 0;
      items.forEach((item, index) => {
        const itemTotal = item.quantity * item.price;
        totalAmount += itemTotal;
        message += `${index + 1}. ${item.product.name}\n`;
        message += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity} —à—Ç.\n`;
        message += `   –¶–µ–Ω–∞: ${item.price} ‚Ç∏/—à—Ç.\n`;
        message += `   –°—É–º–º–∞: ${itemTotal} ‚Ç∏\n\n`;
      });

      message += `üí∞ *–ò—Ç–æ–≥–æ –ø–æ –≤–∞—à–µ–º—É –º–∞–≥–∞–∑–∏–Ω—É:* ${totalAmount} ‚Ç∏\n\n`;
      message += `‚ö° *–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤!*`;

      // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
      const keyboard = [];
      
      for (const item of items) {
        // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        const confirmation = await prisma.storeOrderConfirmation.findFirst({
          where: {
            orderItem: {
              orderId: order.id,
              productId: item.productId
            },
            storeId: store.id
          }
        });

        if (confirmation) {
          const confirmedData = `confirm_item:${confirmation.id}:CONFIRMED:${item.quantity}`;
          const partialData = `confirm_item:${confirmation.id}:PARTIAL:0`;
          const rejectedData = `confirm_item:${confirmation.id}:REJECTED:0`;
          
          console.log('üéØ –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', {
            productName: item.product.name,
            confirmationId: confirmation.id,
            confirmedData,
            partialData,
            rejectedData,
            confirmedDataLength: confirmedData.length,
            partialDataLength: partialData.length,
            rejectedDataLength: rejectedData.length
          });
          
          keyboard.push([
            {
              text: `‚úÖ ${item.product.name} - –í –Ω–∞–ª–∏—á–∏–∏`,
              callback_data: confirmedData
            }
          ]);
          keyboard.push([
            {
              text: `‚ö†Ô∏è ${item.product.name} - –ß–∞—Å—Ç–∏—á–Ω–æ`,
              callback_data: partialData
            },
            {
              text: `‚ùå ${item.product.name} - –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏`,
              callback_data: rejectedData
            }
          ]);
        } else {
          console.warn('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', {
            orderId: order.id,
            productId: item.productId,
            storeId: store.id
          });
        }
      }

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É:', {
        telegramUserId,
        storeName: store.name,
        keyboardRows: keyboard.length,
        totalButtons: keyboard.reduce((sum, row) => sum + row.length, 0)
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.bot.sendMessage(telegramUserId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });

      console.log(`üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É ${store.name} (${telegramUserId})`);
      
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É ${telegramUserId}:`, error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–º
   */
  private async handleItemConfirmation(
    confirmationId: number,
    status: 'CONFIRMED' | 'PARTIAL' | 'REJECTED',
    quantity: number = 0,
    query: CallbackQuery
  ) {
    if (!this.bot) return;

    console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', {
      confirmationId,
      status,
      quantity,
      from: query.from?.username || query.from?.id
    });

    try {
      const confirmation = await prisma.storeOrderConfirmation.findUnique({
        where: { id: confirmationId },
        include: {
          orderItem: {
            include: {
              product: { select: { name: true } },
              order: { select: { id: true } }
            }
          },
          store: {
            include: {
              owner: { select: { id: true } }
            }
          }
        }
      });

      if (!confirmation) {
        console.log('‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', confirmationId);
        await this.bot.answerCallbackQuery(query.id, {
          text: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
          show_alert: true
        });
        return;
      }

      console.log('üì¶ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:', {
        id: confirmation.id,
        status: confirmation.status,
        productName: confirmation.orderItem.product.name,
        orderId: confirmation.orderItem.order.id
      });

      if (confirmation.status !== 'PENDING') {
        console.log('‚ö†Ô∏è –¢–æ–≤–∞—Ä —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º:', confirmation.status);
        await this.bot.answerCallbackQuery(query.id, {
          text: '–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
          show_alert: true
        });
        return;
      }

      // –ï—Å–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      if (status === 'PARTIAL') {
        console.log('‚ùì –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
        await this.requestQuantityInput(
          query.from.id.toString(),
          confirmationId,
          confirmation.orderItem.product.name,
          confirmation.orderItem.quantity
        );
        await this.bot.answerCallbackQuery(query.id, {
          text: '–£–∫–∞–∂–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'
        });
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      const finalQuantity = status === 'REJECTED' ? 0 : quantity;
      
      console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –ë–î:', {
        status,
        finalQuantity,
        confirmedById: confirmation.store.owner?.id
      });

      await prisma.storeOrderConfirmation.update({
        where: { id: confirmationId },
        data: {
          status,
          confirmedQuantity: finalQuantity,
          confirmedAt: new Date(),
          confirmedById: confirmation.store.owner!.id
        }
      });

      const statusText = {
        'CONFIRMED': '‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        'REJECTED': '‚ùå –æ—Ç–∫–ª–æ–Ω–µ–Ω',
        'PARTIAL': '‚ö†Ô∏è —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
      };

      console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');

      await this.bot.answerCallbackQuery(query.id, {
        text: `–¢–æ–≤–∞—Ä "${confirmation.orderItem.product.name}" ${statusText[status]}`
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.updateOrderMessage(query.message, confirmation.orderItem.order.id);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
      if (this.bot) {
        await this.bot.answerCallbackQuery(query.id, {
          text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
          show_alert: true
        });
      }
    }
  }

  /**
   * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
   */
  private async requestQuantityInput(
    telegramUserId: string,
    confirmationId: number,
    productName: string,
    maxQuantity: number
  ) {
    if (!this.bot) return;

    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
      const expiresAt = new Date();
      expiresAt.setMinutes(expiresAt.getMinutes() + 10); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω—É—Ç

      await prisma.telegramUserState.upsert({
        where: { telegram_user_id: telegramUserId },
        update: {
          state: 'waiting_quantity_input',
          data: {
            confirmationId,
            productName,
            maxQuantity
          },
          expiresAt
        },
        create: {
          telegram_user_id: telegramUserId,
          state: 'waiting_quantity_input',
          data: {
            confirmationId,
            productName,
            maxQuantity
          },
          expiresAt
        }
      });

      const message = `–£–∫–∞–∂–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ "${productName}"\n` +
                     `–ó–∞–∫–∞–∑–∞–Ω–æ: ${maxQuantity} —à—Ç.\n` +
                     `–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ${maxQuantity - 1}:`;

      await this.bot.sendMessage(telegramUserId, message, {
        reply_markup: {
          force_reply: true,
          selective: true
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async checkPendingQuantityInput(telegramUserId: string): Promise<PendingQuantityInput | null> {
    try {
      const userState = await prisma.telegramUserState.findUnique({
        where: { telegram_user_id: telegramUserId }
      });

      if (!userState || userState.expiresAt < new Date()) {
        return null;
      }

      if (userState.state === 'waiting_quantity_input' && userState.data) {
        const data = userState.data as any;
        return {
          confirmationId: data.confirmationId,
          productName: data.productName,
          maxQuantity: data.maxQuantity
        };
      }

      return null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   */
  private async handleQuantityInput(message: Message, pendingInput: PendingQuantityInput) {
    if (!this.bot || !message.from) return;

    try {
      const quantity = parseInt(message.text || '');
      
      if (isNaN(quantity) || quantity < 1 || quantity >= pendingInput.maxQuantity) {
        await this.bot.sendMessage(message.from.id, 
          `‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ${pendingInput.maxQuantity - 1}`
        );
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      const confirmation = await prisma.storeOrderConfirmation.findUnique({
        where: { id: pendingInput.confirmationId },
        include: {
          store: {
            include: { owner: { select: { id: true } } }
          },
          orderItem: {
            select: { orderId: true }
          }
        }
      });

      if (!confirmation || !confirmation.store.owner) {
        await this.bot.sendMessage(message.from.id, '‚ùå –û—à–∏–±–∫–∞: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      await prisma.storeOrderConfirmation.update({
        where: { id: pendingInput.confirmationId },
        data: {
          status: 'PARTIAL',
          confirmedQuantity: quantity,
          confirmedAt: new Date(),
          confirmedById: confirmation.store.owner.id
        }
      });

      // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
      await prisma.telegramUserState.delete({
        where: { telegram_user_id: message.from.id.toString() }
      });

      await this.bot.sendMessage(message.from.id, 
        `‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ–µ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ "${pendingInput.productName}": ${quantity} —à—Ç.`
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º (–Ω–∞—Ö–æ–¥–∏–º –µ–≥–æ —á–µ—Ä–µ–∑ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π)
      // –ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å –Ω–µ—Ç –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      try {
        await this.sendOrderStatusSummary(confirmation.orderItem.orderId, message.from.id.toString());
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error);
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', error);
      if (this.bot) {
        await this.bot.sendMessage(message.from.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ');
      }
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
   */
  private async updateOrderMessage(message: any, orderId: number) {
    if (!this.bot) return;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è—Ö
      const order = await prisma.order.findUnique({
        where: { id: orderId },
        include: {
          user: {
            select: { name: true, telegram_user_id: true, phone_number: true }
          },
          items: {
            include: {
              product: {
                select: { 
                  id: true, 
                  name: true, 
                  price: true, 
                  image: true,
                  store: {
                    select: { 
                      id: true, 
                      name: true
                    }
                  }
                }
              }
            }
          }
        }
      });

      if (!order) {
        console.error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', orderId);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
      const confirmations = await prisma.storeOrderConfirmation.findMany({
        where: {
          orderItem: { orderId }
        },
        include: {
          orderItem: {
            select: { id: true, productId: true }
          }
        }
      });

      // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–æ productId
      const confirmationMap = new Map();
      confirmations.forEach(conf => {
        confirmationMap.set(conf.orderItem.productId, conf);
      });

      // –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞)
      const store = order.items[0]?.product.store;
      if (!store) {
        console.error('–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞:', orderId);
        return;
      }

      const customerName = order.user.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å';
      const customerPhone = order.user.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω';
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      let updateText = `üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id}*\n\n`;
      updateText += `üè™ *–ú–∞–≥–∞–∑–∏–Ω:* ${store.name}\n`;
      updateText += `üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* ${customerName}\n`;
      updateText += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${customerPhone}\n`;
      updateText += `üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* ${order.address}\n\n`;
      updateText += `üì¶ *–¢–æ–≤–∞—Ä—ã:*\n`;

      let totalAmount = 0;
      const pendingItems: Array<{ item: any, confirmationId: number }> = [];

      order.items.forEach((item: any, index: number) => {
        const itemTotal = item.quantity * item.price;
        totalAmount += itemTotal;
        
        updateText += `${index + 1}. ${item.product.name}\n`;
        updateText += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity} —à—Ç.\n`;
        updateText += `   –¶–µ–Ω–∞: ${item.price} ‚Ç∏/—à—Ç.\n`;
        updateText += `   –°—É–º–º–∞: ${itemTotal} ‚Ç∏\n`;
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        const confirmation = confirmationMap.get(item.productId);
        
        if (confirmation) {
          const statusEmoji = {
            'PENDING': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
            'CONFIRMED': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
            'PARTIAL': `‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ (${confirmation.confirmedQuantity} —à—Ç.)`,
            'REJECTED': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
          };
          updateText += `   –°—Ç–∞—Ç—É—Å: ${statusEmoji[confirmation.status as keyof typeof statusEmoji]}\n`;
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å PENDING
          if (confirmation.status === 'PENDING') {
            pendingItems.push({
              item,
              confirmationId: confirmation.id
            });
          }
        } else {
          updateText += `   –°—Ç–∞—Ç—É—Å: ‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n`;
        }
        updateText += '\n';
      });

      updateText += `üí∞ *–ò—Ç–æ–≥–æ –ø–æ –≤–∞—à–µ–º—É –º–∞–≥–∞–∑–∏–Ω—É:* ${totalAmount} ‚Ç∏\n\n`;

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
      const keyboard: any[] = [];
      
      if (pendingItems.length > 0) {
        updateText += `‚ö° *–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤!*`;
        
        pendingItems.forEach(({ item, confirmationId }) => {
          console.log('üéØ –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:', {
            productName: item.product.name,
            confirmationId,
            quantity: item.quantity
          });
          
          keyboard.push([
            {
              text: `‚úÖ ${item.product.name} - –í –Ω–∞–ª–∏—á–∏–∏`,
              callback_data: `confirm_item:${confirmationId}:CONFIRMED:${item.quantity}`
            }
          ]);
          keyboard.push([
            {
              text: `‚ö†Ô∏è ${item.product.name} - –ß–∞—Å—Ç–∏—á–Ω–æ`,
              callback_data: `confirm_item:${confirmationId}:PARTIAL:0`
            },
            {
              text: `‚ùå ${item.product.name} - –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏`,
              callback_data: `confirm_item:${confirmationId}:REJECTED:0`
            }
          ]);
        });
      } else {
        updateText += `‚úÖ *–í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!*`;
      }

      console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', {
        orderId,
        pendingItemsCount: pendingItems.length,
        keyboardRows: keyboard.length
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
      await this.bot.editMessageText(updateText, {
        chat_id: message.chat.id,
        message_id: message.message_id,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
   */
  async sendOrderStatusUpdate(orderId: number, newStatus: string) {
    if (!this.bot) return;

    try {
      const order = await prisma.order.findUnique({
        where: { id: orderId },
        include: {
          user: { select: { telegram_user_id: true, name: true } }
        }
      });

      if (!order || !order.user.telegram_user_id) return;

      const statusMessages = {
        'WAITING_PAYMENT': 'üí≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
        'PREPARING': 'üì¶ –ì–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ',
        'DELIVERING': 'üöö –í –ø—É—Ç–∏',
        'DELIVERED': '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'CANCELLED': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
      };

      const message = `üîî –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω–µ–Ω\n\n` +
                     `${statusMessages[newStatus as keyof typeof statusMessages] || newStatus}`;

      await this.bot.sendMessage(order.user.telegram_user_id, message);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–æ –∑–∞–∫–∞–∑—É
   */
  private async sendOrderStatusSummary(orderId: number, telegramUserId: string) {
    if (!this.bot) return;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è—Ö
      const confirmations = await prisma.storeOrderConfirmation.findMany({
        where: {
          orderItem: { orderId }
        },
        include: {
          orderItem: {
            include: {
              product: { select: { name: true } }
            }
          }
        }
      });

      let summaryText = `üìã *–°—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–æ –∑–∞–∫–∞–∑—É #${orderId}:*\n\n`;
      
      let hasPending = false;
      confirmations.forEach(conf => {
        const statusEmoji = {
          'PENDING': '‚è≥',
          'CONFIRMED': '‚úÖ',
          'PARTIAL': '‚ö†Ô∏è',
          'REJECTED': '‚ùå'
        };
        
        summaryText += `${statusEmoji[conf.status as keyof typeof statusEmoji]} ${conf.orderItem.product.name}`;
        if (conf.status === 'PARTIAL') {
          summaryText += ` (${conf.confirmedQuantity} —à—Ç.)`;
        }
        summaryText += '\n';
        
        if (conf.status === 'PENDING') {
          hasPending = true;
        }
      });

      if (hasPending) {
        summaryText += '\n‚ö° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –µ—â–µ –æ–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.';
      } else {
        summaryText += '\n‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!';
      }

      await this.bot.sendMessage(telegramUserId, summaryText, {
        parse_mode: 'Markdown'
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä—É –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
   */
  async sendCourierAssignmentNotification(orderId: number, courierId: number) {
    if (!this.bot) return;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ –∫—É—Ä—å–µ—Ä–µ
      const order = await prisma.order.findUnique({
        where: { id: orderId },
        include: {
          user: {
            select: { name: true, phone_number: true }
          },
          items: {
            include: {
              product: {
                select: { name: true, price: true }
              }
            }
          },
          courier: {
            select: { telegram_user_id: true, name: true }
          }
        }
      });

      if (!order || !order.courier?.telegram_user_id) {
        console.warn('–ó–∞–∫–∞–∑ –∏–ª–∏ –∫—É—Ä—å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', { orderId, courierId });
        return;
      }

      const customerName = order.user.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å';
      const customerPhone = order.user.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω';
      const totalAmount = order.items.reduce((sum, item) => sum + (item.quantity * (item.price || 0)), 0);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ
      let deliveryInfo = '';
      if (order.deliveryType === 'SCHEDULED' && order.scheduledDate) {
        const deliveryDate = new Date(order.scheduledDate);
        const formattedDate = deliveryDate.toLocaleDateString('ru-RU', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric'
        });
        const formattedTime = deliveryDate.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit'
        });
        deliveryInfo = `‚è∞ *–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞:* ${formattedDate} –≤ ${formattedTime}\n`;
      } else {
        deliveryInfo = `üöÄ *–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:* –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ\n`;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      let message = `üöö *–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id}*\n\n`;
      message += `üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* ${customerName}\n`;
      message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${customerPhone}\n`;
      message += `üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* ${order.address}\n`;
      message += deliveryInfo;
      message += `\nüì¶ *–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:*\n`;

      order.items.forEach((item, index) => {
        const itemTotal = item.quantity * (item.price || 0);
        message += `${index + 1}. ${item.product.name}\n`;
        message += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity} —à—Ç.\n`;
        message += `   –¶–µ–Ω–∞: ${item.price || 0} ‚Ç∏/—à—Ç.\n`;
        message += `   –°—É–º–º–∞: ${itemTotal} ‚Ç∏\n\n`;
      });

      message += `üí∞ *–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:* ${totalAmount} ‚Ç∏\n\n`;
      message += `üöÄ *–°—Ç–∞—Ç—É—Å:* –ì–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ\n`;
      message += `üì± –ö–æ–≥–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç–µ –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ`;

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏
      const keyboard = [
        [
          {
            text: '‚úÖ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
            callback_data: `courier_delivered:${orderId}:${courierId}`
          }
        ]
      ];

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä—É:', {
        courierId,
        courierTelegram: order.courier.telegram_user_id,
        orderId,
        totalAmount
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await this.bot.sendMessage(order.courier.telegram_user_id, message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });

      console.log(`üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ #${orderId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫—É—Ä—å–µ—Ä—É ${order.courier.name || courierId}`);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä—É:', error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç –∫—É—Ä—å–µ—Ä–∞
   */
  private async handleCourierDelivery(orderId: number, courierId: number, query: CallbackQuery) {
    if (!this.bot) return;

    console.log('üöö –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:', {
      orderId,
      courierId,
      from: query.from?.username || query.from?.id
    });

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ–º—É –∫—É—Ä—å–µ—Ä—É
      const order = await prisma.order.findUnique({
        where: { id: orderId },
        select: { 
          id: true, 
          courierId: true,
          statuses: {
            orderBy: { createdAt: 'desc' },
            take: 1,
            select: { status: true }
          }
        }
      });

      if (!order) {
        await this.bot.answerCallbackQuery(query.id, {
          text: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω',
          show_alert: true
        });
        return;
      }

      if (order.courierId !== courierId) {
        await this.bot.answerCallbackQuery(query.id, {
          text: '–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞–º',
          show_alert: true
        });
        return;
      }

      const currentStatus = order.statuses[0]?.status;
      if (currentStatus === 'DELIVERED') {
        await this.bot.answerCallbackQuery(query.id, {
          text: '–ó–∞–∫–∞–∑ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π',
          show_alert: true
        });
        return;
      }

      if (currentStatus !== 'DELIVERING') {
        await this.bot.answerCallbackQuery(query.id, {
          text: '–ú–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ "–í –ø—É—Ç–∏"',
          show_alert: true
        });
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ DELIVERED
      await prisma.orderStatus.create({
        data: {
          orderId,
          status: 'DELIVERED'
        }
      });

      console.log(`‚úÖ –ó–∞–∫–∞–∑ #${orderId} –æ—Ç–º–µ—á–µ–Ω –∫—É—Ä—å–µ—Ä–æ–º ${courierId} –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π`);

      await this.bot.answerCallbackQuery(query.id, {
        text: '‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π!'
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫—É
      if (query.message) {
        const updatedText = query.message.text + '\n\n‚úÖ *–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!*';
        
        await this.bot.editMessageText(updatedText, {
          chat_id: query.message.chat.id,
          message_id: query.message.message_id,
          parse_mode: 'Markdown'
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É –∫–ª–∏–µ–Ω—Ç—É
      await this.sendRatingRequest(orderId);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ
      await this.sendOrderStatusUpdate(orderId, 'DELIVERED');

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:', error);
      if (this.bot) {
        await this.bot.answerCallbackQuery(query.id, {
          text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
          show_alert: true
        });
      }
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ü–µ–Ω–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É
  async sendRatingRequest(orderId: number): Promise<void> {
    try {
      if (!this.bot) {
        console.error('‚ùå Telegram bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return;
      }

      console.log(`üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);

      const order = await prisma.order.findUnique({
        where: { id: orderId },
        include: {
          user: {
            select: { telegram_user_id: true, name: true }
          },
          courier: {
            select: { name: true }
          },
          items: {
            include: {
              product: {
                select: { name: true }
              }
            }
          },
          deliveryRating: true
        }
      });

      if (!order) {
        console.error(`‚ùå –ó–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ü–µ–Ω–∫—É`);
        return;
      }

      if (order.deliveryRating) {
        console.log(`‚ÑπÔ∏è –û—Ü–µ–Ω–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId} —É–∂–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞`);
        return;
      }

      if (!order.user.telegram_user_id) {
        console.log(`‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫–∞–∑–∞ #${orderId} –Ω–µ—Ç Telegram ID`);
        return;
      }

      const courierName = order.courier?.name || '–ö—É—Ä—å–µ—Ä';
      const totalAmount = order.items.reduce((sum, item) => sum + (item.quantity * (item.price || 0)), 0);

      let message = `üéâ *–í–∞—à –∑–∞–∫–∞–∑ #${orderId} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!*\n\n`;
      message += `üë§ *–ö—É—Ä—å–µ—Ä:* ${courierName}\n`;
      message += `üí∞ *–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:* ${totalAmount} ‚Ç∏\n\n`;
      message += `üìä *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∞–≤–∫–∏:*\n`;
      message += `‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤\n`;
      message += `‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏\n`;
      message += `‚Ä¢ –û–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ\n\n`;
      message += `–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å —Å–µ—Ä–≤–∏—Å! ‚≠ê`;

      const keyboard = [
        [
          {
            text: '‚≠ê –û—Ü–µ–Ω–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É',
            callback_data: `rate_delivery:${orderId}`
          }
        ]
      ];

      await this.bot.sendMessage(order.user.telegram_user_id, message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });

      console.log(`üì± –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ü–µ–Ω–∫—É:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ü–µ–Ω–∫–∏
  async handleRatingStart(query: any, orderId: number): Promise<void> {
    try {
      if (!this.bot) {
        console.error('‚ùå Telegram bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return;
      }

      const userId = query.from.id.toString();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É
      const order = await prisma.order.findUnique({
        where: { id: orderId },
        include: {
          user: { select: { telegram_user_id: true } },
          deliveryRating: true
        }
      });

      if (!order) {
        await this.bot.answerCallbackQuery(query.id, {
          text: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω',
          show_alert: true
        });
        return;
      }

      if (order.user.telegram_user_id !== userId) {
        await this.bot.answerCallbackQuery(query.id, {
          text: '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã',
          show_alert: true
        });
        return;
      }

      if (order.deliveryRating) {
        await this.bot.answerCallbackQuery(query.id, {
          text: '–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑',
          show_alert: true
        });
        return;
      }

      await this.bot.answerCallbackQuery(query.id, {
        text: '–ù–∞—á–∏–Ω–∞–µ–º –æ—Ü–µ–Ω–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏...'
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å - –∫–∞—á–µ—Å—Ç–≤–æ
      await this.sendQualityRating(userId, orderId);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ—Ü–µ–Ω–∫–∏:', error);
      if (this.bot) {
        await this.bot.answerCallbackQuery(query.id, {
          text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
          show_alert: true
        });
      }
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
  async sendQualityRating(chatId: string, orderId: number): Promise<void> {
    if (!this.bot) {
      console.error('‚ùå Telegram bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    const message = `üì¶ *–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤*\n\n–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç 1 –¥–æ 5:`;
    
    const keyboard = [];
    for (let i = 1; i <= 5; i++) {
      keyboard.push([{
        text: `${i} ${'‚≠ê'.repeat(i)}`,
        callback_data: `quality_rating:${orderId}:${i}`
      }]);
    }

    await this.bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
  async sendSpeedRating(chatId: string, orderId: number, quality: number): Promise<void> {
    if (!this.bot) {
      console.error('‚ùå Telegram bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    const message = `üöÄ *–û—Ü–µ–Ω–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏*\n\n–û—Ü–µ–Ω–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç 1 –¥–æ 5:`;
    
    const keyboard = [];
    for (let i = 1; i <= 5; i++) {
      keyboard.push([{
        text: `${i} ${'‚≠ê'.repeat(i)}`,
        callback_data: `speed_rating:${orderId}:${quality}:${i}`
      }]);
    }

    await this.bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è
  async sendImpressionRating(chatId: string, orderId: number, quality: number, speed: number): Promise<void> {
    if (!this.bot) {
      console.error('‚ùå Telegram bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    const message = `üíù *–û–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ*\n\n–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ –æ–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç 1 –¥–æ 5:`;
    
    const keyboard = [];
    for (let i = 1; i <= 5; i++) {
      keyboard.push([{
        text: `${i} ${'‚≠ê'.repeat(i)}`,
        callback_data: `impression_rating:${orderId}:${quality}:${speed}:${i}`
      }]);
    }

    await this.bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  }

  // –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏
  async finalizeRating(chatId: string, orderId: number, quality: number, speed: number, impression: number): Promise<void> {
    try {
      if (!this.bot) {
        console.error('‚ùå Telegram bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
      const order = await prisma.order.findUnique({
        where: { id: orderId },
        include: {
          user: { select: { id: true } }
        }
      });

      if (!order) {
        await this.bot.sendMessage(chatId, '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –æ—Ü–µ–Ω–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await prisma.deliveryRating.create({
        data: {
          orderId,
          userId: order.user.id,
          courierId: order.courierId,
          quality,
          speed,
          impression
        }
      });

      const avgRating = ((quality + speed + impression) / 3).toFixed(1);
      
      let message = `üéâ *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!*\n\n`;
      message += `üìä *–í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏:*\n`;
      message += `üì¶ –ö–∞—á–µ—Å—Ç–≤–æ: ${quality} ${'‚≠ê'.repeat(quality)}\n`;
      message += `üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: ${speed} ${'‚≠ê'.repeat(speed)}\n`;
      message += `üíù –í–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ: ${impression} ${'‚≠ê'.repeat(impression)}\n\n`;
      message += `‚≠ê *–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ${avgRating}/5*\n\n`;
      message += `–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üíô`;

      await this.bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown'
      });

      console.log(`‚úÖ –û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}: –∫–∞—á–µ—Å—Ç–≤–æ ${quality}, —Å–∫–æ—Ä–æ—Å—Ç—å ${speed}, –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ ${impression}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏:', error);
      if (this.bot) {
        await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏.');
      }
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  async sendOrderStatusNotification(orderId: number, status: string): Promise<void> {
    try {
      if (!this.bot) {
        console.error('‚ùå Telegram bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return;
      }

      console.log(`üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #${orderId} –Ω–∞ ${status}`);

      const order = await prisma.order.findUnique({
        where: { id: orderId },
        include: {
          user: {
            select: { telegram_user_id: true, name: true }
          },
          items: {
            include: {
              product: {
                select: { name: true }
              }
            }
          },
          courier: {
            select: { name: true }
          }
        }
      });

      if (!order) {
        console.error(`‚ùå –ó–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`);
        return;
      }

      if (!order.user.telegram_user_id) {
        console.log(`‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫–∞–∑–∞ #${orderId} –Ω–µ—Ç Telegram ID`);
        return;
      }

      const statusMessages = {
        'NEW': 'üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑',
        'WAITING_PAYMENT': 'üí≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
        'PREPARING': 'üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è',
        'DELIVERING': 'üöö –í –ø—É—Ç–∏',
        'DELIVERED': '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'CANCELLED': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
      };

      const statusEmoji = {
        'NEW': 'üÜï',
        'WAITING_PAYMENT': 'üí≥',
        'PREPARING': 'üë®‚Äçüç≥',
        'DELIVERING': 'üöö',
        'DELIVERED': '‚úÖ',
        'CANCELLED': '‚ùå'
      };

      const statusText = statusMessages[status as keyof typeof statusMessages] || status;
      const emoji = statusEmoji[status as keyof typeof statusEmoji] || 'üìã';

      let message = `${emoji} *–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω–µ–Ω*\n\n`;
      message += `üìä *–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:* ${statusText}\n`;
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö
      if (order.items.length > 0) {
        message += `\nüõí *–¢–æ–≤–∞—Ä—ã:*\n`;
        order.items.forEach(item => {
          message += `‚Ä¢ ${item.product.name} x${item.quantity}\n`;
        });
      }

      // –û–±—â–∞—è —Å—É–º–º–∞
      const totalAmount = order.items.reduce((sum, item) => sum + (item.quantity * (item.price || 0)), 0);
      message += `\nüí∞ *–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:* ${totalAmount} ‚Ç∏`;

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
      if (status === 'DELIVERING' && order.courier) {
        message += `\n\nüöö *–ö—É—Ä—å–µ—Ä:* ${order.courier.name}`;
        message += `\nüìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* ${order.address}`;
        
        if (order.deliveryType === 'SCHEDULED' && order.scheduledDate) {
          const deliveryTime = new Date(order.scheduledDate).toLocaleString('ru-RU', {
            timeZone: 'Asia/Almaty',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
          });
          message += `\n‚è∞ *–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:* ${deliveryTime}`;
        } else {
          message += `\n‚ö° *–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:* –ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ`;
        }
      } else if (status === 'DELIVERED') {
        message += `\n\nüéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!`;
      } else if (status === 'CANCELLED') {
        message += `\n\nüòî –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞`;
      } else if (status === 'PREPARING') {
        message += `\n\n‚è±Ô∏è –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ`;
      }

      await this.bot.sendMessage(order.user.telegram_user_id, message, {
        parse_mode: 'Markdown'
      });

      console.log(`üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ:', error);
    }
  }




    private async sendAdminOrderNotification(
    order: any, 
    store: any, 
    items: any[], 
    telegramUserId: string
  ) {
    if (!this.bot) return;

    try {
      const customerName = order.user.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å';
      const customerPhone = order.user.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω';
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      let message = `üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id}*\n\n`;
      message += `üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* ${customerName}\n`;
      message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${customerPhone}\n`;
      message += `üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* ${order.address}\n\n`;
      message += `üì¶ *–¢–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:*\n`;

      let totalAmount = 0;
      items.forEach((item, index) => {
        const itemTotal = item.quantity * item.price;
        totalAmount += itemTotal;
        message += `${index + 1}. ${item.product.name}\n`;
        message += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity} —à—Ç.\n`;
        message += `   –¶–µ–Ω–∞: ${item.price} ‚Ç∏/—à—Ç.\n`;
        message += `   –°—É–º–º–∞: ${itemTotal} ‚Ç∏\n\n`;
      });

     
      message += `‚ö° *–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤!*`;

      // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
      const keyboard = [];
      
      for (const item of items) {
        // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        const confirmation = await prisma.storeOrderConfirmation.findFirst({
          where: {
            orderItem: {
              orderId: order.id,
              productId: item.productId
            },
            storeId: store.id
          }
        });

        if (confirmation) {
          const confirmedData = `confirm_item:${confirmation.id}:CONFIRMED:${item.quantity}`;
          const partialData = `confirm_item:${confirmation.id}:PARTIAL:0`;
          const rejectedData = `confirm_item:${confirmation.id}:REJECTED:0`;
          
          console.log('üéØ –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', {
            productName: item.product.name,
            confirmationId: confirmation.id,
            confirmedData,
            partialData,
            rejectedData,
            confirmedDataLength: confirmedData.length,
            partialDataLength: partialData.length,
            rejectedDataLength: rejectedData.length
          });
          
          keyboard.push([
            {
              text: `‚úÖ ${item.product.name} - –í –Ω–∞–ª–∏—á–∏–∏`,
              callback_data: confirmedData
            }
          ]);
          keyboard.push([
            {
              text: `‚ö†Ô∏è ${item.product.name} - –ß–∞—Å—Ç–∏—á–Ω–æ`,
              callback_data: partialData
            },
            {
              text: `‚ùå ${item.product.name} - –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏`,
              callback_data: rejectedData
            }
          ]);
        } else {
          console.warn('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', {
            orderId: order.id,
            productId: item.productId,
            storeId: store.id
          });
        }
      }

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É:', {
        telegramUserId,
        storeName: store.name,
        keyboardRows: keyboard.length,
        totalButtons: keyboard.reduce((sum, row) => sum + row.length, 0)
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.bot.sendMessage(telegramUserId, message, {
        parse_mode: 'Markdown',
        
      });

      console.log(`üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É ${store.name} (${telegramUserId})`);
      
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É ${telegramUserId}:`, error);
      throw error;
    }
  }
}





export const telegramService = new TelegramNotificationService();
