"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.telegramService = exports.TelegramNotificationService = void 0;
const node_telegram_bot_api_1 = __importDefault(require("node-telegram-bot-api"));
const prisma_1 = __importDefault(require("../lib/prisma"));
const errorHandler_1 = require("../middlewares/errorHandler");
class TelegramNotificationService {
    constructor() {
        this.bot = null;
        this.isProduction = false;
        const token = process.env.TELEGRAM_BOT_TOKEN;
        if (!token) {
            console.warn('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.');
            return;
        }
        this.isProduction = process.env.NODE_ENV === 'production';
        this.bot = new node_telegram_bot_api_1.default(token, {
            polling: true, // –í–∫–ª—é—á–∞–µ–º polling –≤–æ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–∞—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback queries
            webHook: false
        });
        console.log('ü§ñ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å polling:', true);
        this.setupBotHandlers();
        this.startCleanupTask();
    }
    setupBotHandlers() {
        if (!this.bot)
            return;
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        this.bot.on('callback_query', (query) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            console.log('üîî –ü–æ–ª—É—á–µ–Ω callback query:', {
                id: query.id,
                data: query.data,
                from: ((_a = query.from) === null || _a === void 0 ? void 0 : _a.username) || ((_b = query.from) === null || _b === void 0 ? void 0 : _b.id)
            });
            try {
                if (!query.data || !query.message) {
                    console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç data –∏–ª–∏ message –≤ callback query');
                    return;
                }
                const [action, confirmationId, status, quantity] = query.data.split(':');
                console.log('üìä –ü–∞—Ä—Å–∏–Ω–≥ callback data:', { action, confirmationId, status, quantity });
                if (action === 'confirm_item') {
                    yield this.handleItemConfirmation(parseInt(confirmationId), status, quantity ? parseInt(quantity) : undefined, query);
                }
                else if (action === 'courier_delivered') {
                    const orderId = parseInt(confirmationId);
                    const courierId = parseInt(status);
                    yield this.handleCourierDelivery(orderId, courierId, query);
                }
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query:', error);
                if (this.bot) {
                    yield this.bot.answerCallbackQuery(query.id, {
                        text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                        show_alert: true
                    });
                }
            }
        }));
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        this.bot.on('message', (msg) => __awaiter(this, void 0, void 0, function* () {
            try {
                if (!msg.text || msg.text.startsWith('/') || !msg.from)
                    return;
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const pendingInput = yield this.checkPendingQuantityInput(msg.from.id.toString());
                if (pendingInput) {
                    yield this.handleQuantityInput(msg, pendingInput);
                }
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            }
        }));
    }
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
     */
    startCleanupTask() {
        // –û—á–∏—â–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        setInterval(() => __awaiter(this, void 0, void 0, function* () {
            try {
                yield prisma_1.default.telegramUserState.deleteMany({
                    where: {
                        expiresAt: {
                            lte: new Date()
                        }
                    }
                });
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π:', error);
            }
        }), 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
     */
    sendNewOrderNotifications(orderId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ —Ç–æ–≤–∞—Ä–∞—Ö
                const order = yield prisma_1.default.order.findUnique({
                    where: { id: orderId },
                    include: {
                        user: {
                            select: { name: true, telegram_user_id: true, phone_number: true }
                        },
                        items: {
                            include: {
                                product: {
                                    select: {
                                        id: true,
                                        name: true,
                                        price: true,
                                        image: true,
                                        storeId: true,
                                        store: {
                                            select: {
                                                id: true,
                                                name: true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                });
                if (!order) {
                    throw new errorHandler_1.AppError('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω', 404);
                }
                // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏–∑ –∑–∞–∫–∞–∑–∞
                const storeIds = [...new Set(order.items.map(item => item.product.storeId))];
                console.log('üè™ –ú–∞–≥–∞–∑–∏–Ω—ã –≤ –∑–∞–∫–∞–∑–µ:', storeIds);
                // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ (SELLER) –¥–ª—è —ç—Ç–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
                const sellers = yield prisma_1.default.user.findMany({
                    where: {
                        role: 'SELLER',
                        ownedStore: {
                            id: { in: storeIds }
                        }
                    },
                    include: {
                        ownedStore: {
                            select: {
                                id: true,
                                name: true
                            }
                        }
                    }
                });
                console.log('üë• –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü—ã:', sellers.map(s => {
                    var _a, _b;
                    return ({
                        id: s.id,
                        name: s.name,
                        role: s.role,
                        storeId: (_a = s.ownedStore) === null || _a === void 0 ? void 0 : _a.id,
                        storeName: (_b = s.ownedStore) === null || _b === void 0 ? void 0 : _b.name,
                        telegram: s.telegram_user_id
                    });
                }));
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
                const storeGroups = new Map();
                for (const item of order.items) {
                    const storeId = item.product.storeId;
                    if (!storeGroups.has(storeId)) {
                        storeGroups.set(storeId, []);
                    }
                    storeGroups.get(storeId).push(item);
                }
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–¥–∞–≤—Ü—É —Ç–æ–ª—å–∫–æ –¥–ª—è –µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
                const notifications = sellers.map((seller) => __awaiter(this, void 0, void 0, function* () {
                    if (!seller.telegram_user_id || !seller.ownedStore) {
                        console.warn(`–ü—Ä–æ–¥–∞–≤–µ—Ü ${seller.name} (ID: ${seller.id}) –Ω–µ –∏–º–µ–µ—Ç Telegram ID –∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω–∞`);
                        return;
                    }
                    const storeId = seller.ownedStore.id;
                    const itemsForStore = storeGroups.get(storeId);
                    if (!itemsForStore || itemsForStore.length === 0) {
                        console.warn(`–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ ${seller.ownedStore.name} (ID: ${storeId})`);
                        return;
                    }
                    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É ${seller.name} –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ ${seller.ownedStore.name}`);
                    return this.sendStoreOrderNotification(order, seller.ownedStore, itemsForStore, seller.telegram_user_id);
                }));
                yield Promise.all(notifications.filter(Boolean));
                console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–µ:', error);
                throw error;
            }
        });
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–æ–¥–∞–≤—Ü—É
     */
    sendStoreOrderNotification(order, store, items, telegramUserId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.bot)
                return;
            try {
                const customerName = order.user.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å';
                const customerPhone = order.user.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω';
                // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                let message = `üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id}*\n\n`;
                message += `üè™ *–ú–∞–≥–∞–∑–∏–Ω:* ${store.name}\n`;
                message += `üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* ${customerName}\n`;
                message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${customerPhone}\n`;
                message += `üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* ${order.address}\n\n`;
                message += `üì¶ *–¢–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:*\n`;
                let totalAmount = 0;
                items.forEach((item, index) => {
                    const itemTotal = item.quantity * item.price;
                    totalAmount += itemTotal;
                    message += `${index + 1}. ${item.product.name}\n`;
                    message += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity} —à—Ç.\n`;
                    message += `   –¶–µ–Ω–∞: ${item.price} ‚Ç∏/—à—Ç.\n`;
                    message += `   –°—É–º–º–∞: ${itemTotal} ‚Ç∏\n\n`;
                });
                message += `üí∞ *–ò—Ç–æ–≥–æ –ø–æ –≤–∞—à–µ–º—É –º–∞–≥–∞–∑–∏–Ω—É:* ${totalAmount} ‚Ç∏\n\n`;
                message += `‚ö° *–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤!*`;
                // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                const keyboard = [];
                for (const item of items) {
                    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                    const confirmation = yield prisma_1.default.storeOrderConfirmation.findFirst({
                        where: {
                            orderItem: {
                                orderId: order.id,
                                productId: item.productId
                            },
                            storeId: store.id
                        }
                    });
                    if (confirmation) {
                        const confirmedData = `confirm_item:${confirmation.id}:CONFIRMED:${item.quantity}`;
                        const partialData = `confirm_item:${confirmation.id}:PARTIAL:0`;
                        const rejectedData = `confirm_item:${confirmation.id}:REJECTED:0`;
                        console.log('üéØ –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', {
                            productName: item.product.name,
                            confirmationId: confirmation.id,
                            confirmedData,
                            partialData,
                            rejectedData,
                            confirmedDataLength: confirmedData.length,
                            partialDataLength: partialData.length,
                            rejectedDataLength: rejectedData.length
                        });
                        keyboard.push([
                            {
                                text: `‚úÖ ${item.product.name} - –í –Ω–∞–ª–∏—á–∏–∏`,
                                callback_data: confirmedData
                            }
                        ]);
                        keyboard.push([
                            {
                                text: `‚ö†Ô∏è ${item.product.name} - –ß–∞—Å—Ç–∏—á–Ω–æ`,
                                callback_data: partialData
                            },
                            {
                                text: `‚ùå ${item.product.name} - –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏`,
                                callback_data: rejectedData
                            }
                        ]);
                    }
                    else {
                        console.warn('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', {
                            orderId: order.id,
                            productId: item.productId,
                            storeId: store.id
                        });
                    }
                }
                console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É:', {
                    telegramUserId,
                    storeName: store.name,
                    keyboardRows: keyboard.length,
                    totalButtons: keyboard.reduce((sum, row) => sum + row.length, 0)
                });
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                yield this.bot.sendMessage(telegramUserId, message, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
                console.log(`üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É ${store.name} (${telegramUserId})`);
            }
            catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É ${telegramUserId}:`, error);
                throw error;
            }
        });
    }
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–º
     */
    handleItemConfirmation(confirmationId_1, status_1) {
        return __awaiter(this, arguments, void 0, function* (confirmationId, status, quantity = 0, query) {
            var _a, _b, _c;
            if (!this.bot)
                return;
            console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', {
                confirmationId,
                status,
                quantity,
                from: ((_a = query.from) === null || _a === void 0 ? void 0 : _a.username) || ((_b = query.from) === null || _b === void 0 ? void 0 : _b.id)
            });
            try {
                const confirmation = yield prisma_1.default.storeOrderConfirmation.findUnique({
                    where: { id: confirmationId },
                    include: {
                        orderItem: {
                            include: {
                                product: { select: { name: true } },
                                order: { select: { id: true } }
                            }
                        },
                        store: {
                            include: {
                                owner: { select: { id: true } }
                            }
                        }
                    }
                });
                if (!confirmation) {
                    console.log('‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', confirmationId);
                    yield this.bot.answerCallbackQuery(query.id, {
                        text: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                        show_alert: true
                    });
                    return;
                }
                console.log('üì¶ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:', {
                    id: confirmation.id,
                    status: confirmation.status,
                    productName: confirmation.orderItem.product.name,
                    orderId: confirmation.orderItem.order.id
                });
                if (confirmation.status !== 'PENDING') {
                    console.log('‚ö†Ô∏è –¢–æ–≤–∞—Ä —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º:', confirmation.status);
                    yield this.bot.answerCallbackQuery(query.id, {
                        text: '–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
                        show_alert: true
                    });
                    return;
                }
                // –ï—Å–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                if (status === 'PARTIAL') {
                    console.log('‚ùì –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
                    yield this.requestQuantityInput(query.from.id.toString(), confirmationId, confirmation.orderItem.product.name, confirmation.orderItem.quantity);
                    yield this.bot.answerCallbackQuery(query.id, {
                        text: '–£–∫–∞–∂–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'
                    });
                    return;
                }
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                const finalQuantity = status === 'REJECTED' ? 0 : quantity;
                console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –ë–î:', {
                    status,
                    finalQuantity,
                    confirmedById: (_c = confirmation.store.owner) === null || _c === void 0 ? void 0 : _c.id
                });
                yield prisma_1.default.storeOrderConfirmation.update({
                    where: { id: confirmationId },
                    data: {
                        status,
                        confirmedQuantity: finalQuantity,
                        confirmedAt: new Date(),
                        confirmedById: confirmation.store.owner.id
                    }
                });
                const statusText = {
                    'CONFIRMED': '‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
                    'REJECTED': '‚ùå –æ—Ç–∫–ª–æ–Ω–µ–Ω',
                    'PARTIAL': '‚ö†Ô∏è —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
                };
                console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
                yield this.bot.answerCallbackQuery(query.id, {
                    text: `–¢–æ–≤–∞—Ä "${confirmation.orderItem.product.name}" ${statusText[status]}`
                });
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                yield this.updateOrderMessage(query.message, confirmation.orderItem.order.id);
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
                if (this.bot) {
                    yield this.bot.answerCallbackQuery(query.id, {
                        text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
                        show_alert: true
                    });
                }
            }
        });
    }
    /**
     * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
     */
    requestQuantityInput(telegramUserId, confirmationId, productName, maxQuantity) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.bot)
                return;
            try {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
                const expiresAt = new Date();
                expiresAt.setMinutes(expiresAt.getMinutes() + 10); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω—É—Ç
                yield prisma_1.default.telegramUserState.upsert({
                    where: { telegram_user_id: telegramUserId },
                    update: {
                        state: 'waiting_quantity_input',
                        data: {
                            confirmationId,
                            productName,
                            maxQuantity
                        },
                        expiresAt
                    },
                    create: {
                        telegram_user_id: telegramUserId,
                        state: 'waiting_quantity_input',
                        data: {
                            confirmationId,
                            productName,
                            maxQuantity
                        },
                        expiresAt
                    }
                });
                const message = `–£–∫–∞–∂–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ "${productName}"\n` +
                    `–ó–∞–∫–∞–∑–∞–Ω–æ: ${maxQuantity} —à—Ç.\n` +
                    `–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ${maxQuantity - 1}:`;
                yield this.bot.sendMessage(telegramUserId, message, {
                    reply_markup: {
                        force_reply: true,
                        selective: true
                    }
                });
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', error);
            }
        });
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    checkPendingQuantityInput(telegramUserId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const userState = yield prisma_1.default.telegramUserState.findUnique({
                    where: { telegram_user_id: telegramUserId }
                });
                if (!userState || userState.expiresAt < new Date()) {
                    return null;
                }
                if (userState.state === 'waiting_quantity_input' && userState.data) {
                    const data = userState.data;
                    return {
                        confirmationId: data.confirmationId,
                        productName: data.productName,
                        maxQuantity: data.maxQuantity
                    };
                }
                return null;
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
                return null;
            }
        });
    }
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    handleQuantityInput(message, pendingInput) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.bot || !message.from)
                return;
            try {
                const quantity = parseInt(message.text || '');
                if (isNaN(quantity) || quantity < 1 || quantity >= pendingInput.maxQuantity) {
                    yield this.bot.sendMessage(message.from.id, `‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ${pendingInput.maxQuantity - 1}`);
                    return;
                }
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                const confirmation = yield prisma_1.default.storeOrderConfirmation.findUnique({
                    where: { id: pendingInput.confirmationId },
                    include: {
                        store: {
                            include: { owner: { select: { id: true } } }
                        },
                        orderItem: {
                            select: { orderId: true }
                        }
                    }
                });
                if (!confirmation || !confirmation.store.owner) {
                    yield this.bot.sendMessage(message.from.id, '‚ùå –û—à–∏–±–∫–∞: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                    return;
                }
                yield prisma_1.default.storeOrderConfirmation.update({
                    where: { id: pendingInput.confirmationId },
                    data: {
                        status: 'PARTIAL',
                        confirmedQuantity: quantity,
                        confirmedAt: new Date(),
                        confirmedById: confirmation.store.owner.id
                    }
                });
                // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
                yield prisma_1.default.telegramUserState.delete({
                    where: { telegram_user_id: message.from.id.toString() }
                });
                yield this.bot.sendMessage(message.from.id, `‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ–µ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ "${pendingInput.productName}": ${quantity} —à—Ç.`);
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º (–Ω–∞—Ö–æ–¥–∏–º –µ–≥–æ —á–µ—Ä–µ–∑ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π)
                // –ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å –Ω–µ—Ç –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                try {
                    yield this.sendOrderStatusSummary(confirmation.orderItem.orderId, message.from.id.toString());
                }
                catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error);
                }
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', error);
                if (this.bot) {
                    yield this.bot.sendMessage(message.from.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ');
                }
            }
        });
    }
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
     */
    updateOrderMessage(message, orderId) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            if (!this.bot)
                return;
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è—Ö
                const order = yield prisma_1.default.order.findUnique({
                    where: { id: orderId },
                    include: {
                        user: {
                            select: { name: true, telegram_user_id: true, phone_number: true }
                        },
                        items: {
                            include: {
                                product: {
                                    select: {
                                        id: true,
                                        name: true,
                                        price: true,
                                        image: true,
                                        store: {
                                            select: {
                                                id: true,
                                                name: true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                });
                if (!order) {
                    console.error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', orderId);
                    return;
                }
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
                const confirmations = yield prisma_1.default.storeOrderConfirmation.findMany({
                    where: {
                        orderItem: { orderId }
                    },
                    include: {
                        orderItem: {
                            select: { id: true, productId: true }
                        }
                    }
                });
                // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–æ productId
                const confirmationMap = new Map();
                confirmations.forEach(conf => {
                    confirmationMap.set(conf.orderItem.productId, conf);
                });
                // –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞)
                const store = (_a = order.items[0]) === null || _a === void 0 ? void 0 : _a.product.store;
                if (!store) {
                    console.error('–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞:', orderId);
                    return;
                }
                const customerName = order.user.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å';
                const customerPhone = order.user.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω';
                // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                let updateText = `üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id}*\n\n`;
                updateText += `üè™ *–ú–∞–≥–∞–∑–∏–Ω:* ${store.name}\n`;
                updateText += `üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* ${customerName}\n`;
                updateText += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${customerPhone}\n`;
                updateText += `üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* ${order.address}\n\n`;
                updateText += `üì¶ *–¢–æ–≤–∞—Ä—ã:*\n`;
                let totalAmount = 0;
                const pendingItems = [];
                order.items.forEach((item, index) => {
                    const itemTotal = item.quantity * item.price;
                    totalAmount += itemTotal;
                    updateText += `${index + 1}. ${item.product.name}\n`;
                    updateText += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity} —à—Ç.\n`;
                    updateText += `   –¶–µ–Ω–∞: ${item.price} ‚Ç∏/—à—Ç.\n`;
                    updateText += `   –°—É–º–º–∞: ${itemTotal} ‚Ç∏\n`;
                    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                    const confirmation = confirmationMap.get(item.productId);
                    if (confirmation) {
                        const statusEmoji = {
                            'PENDING': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
                            'CONFIRMED': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
                            'PARTIAL': `‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ (${confirmation.confirmedQuantity} —à—Ç.)`,
                            'REJECTED': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
                        };
                        updateText += `   –°—Ç–∞—Ç—É—Å: ${statusEmoji[confirmation.status]}\n`;
                        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å PENDING
                        if (confirmation.status === 'PENDING') {
                            pendingItems.push({
                                item,
                                confirmationId: confirmation.id
                            });
                        }
                    }
                    else {
                        updateText += `   –°—Ç–∞—Ç—É—Å: ‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n`;
                    }
                    updateText += '\n';
                });
                updateText += `üí∞ *–ò—Ç–æ–≥–æ –ø–æ –≤–∞—à–µ–º—É –º–∞–≥–∞–∑–∏–Ω—É:* ${totalAmount} ‚Ç∏\n\n`;
                // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                const keyboard = [];
                if (pendingItems.length > 0) {
                    updateText += `‚ö° *–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤!*`;
                    pendingItems.forEach(({ item, confirmationId }) => {
                        console.log('üéØ –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:', {
                            productName: item.product.name,
                            confirmationId,
                            quantity: item.quantity
                        });
                        keyboard.push([
                            {
                                text: `‚úÖ ${item.product.name} - –í –Ω–∞–ª–∏—á–∏–∏`,
                                callback_data: `confirm_item:${confirmationId}:CONFIRMED:${item.quantity}`
                            }
                        ]);
                        keyboard.push([
                            {
                                text: `‚ö†Ô∏è ${item.product.name} - –ß–∞—Å—Ç–∏—á–Ω–æ`,
                                callback_data: `confirm_item:${confirmationId}:PARTIAL:0`
                            },
                            {
                                text: `‚ùå ${item.product.name} - –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏`,
                                callback_data: `confirm_item:${confirmationId}:REJECTED:0`
                            }
                        ]);
                    });
                }
                else {
                    updateText += `‚úÖ *–í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!*`;
                }
                console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', {
                    orderId,
                    pendingItemsCount: pendingItems.length,
                    keyboardRows: keyboard.length
                });
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                yield this.bot.editMessageText(updateText, {
                    chat_id: message.chat.id,
                    message_id: message.message_id,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            }
        });
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
     */
    sendOrderStatusUpdate(orderId, newStatus) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.bot)
                return;
            try {
                const order = yield prisma_1.default.order.findUnique({
                    where: { id: orderId },
                    include: {
                        user: { select: { telegram_user_id: true, name: true } }
                    }
                });
                if (!order || !order.user.telegram_user_id)
                    return;
                const statusMessages = {
                    'WAITING_PAYMENT': 'üí≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
                    'PREPARING': 'üì¶ –ì–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ',
                    'DELIVERING': 'üöö –í –ø—É—Ç–∏',
                    'DELIVERED': '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
                    'CANCELLED': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
                };
                const message = `üîî –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω–µ–Ω\n\n` +
                    `${statusMessages[newStatus] || newStatus}`;
                yield this.bot.sendMessage(order.user.telegram_user_id, message);
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ:', error);
            }
        });
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–æ –∑–∞–∫–∞–∑—É
     */
    sendOrderStatusSummary(orderId, telegramUserId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.bot)
                return;
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è—Ö
                const confirmations = yield prisma_1.default.storeOrderConfirmation.findMany({
                    where: {
                        orderItem: { orderId }
                    },
                    include: {
                        orderItem: {
                            include: {
                                product: { select: { name: true } }
                            }
                        }
                    }
                });
                let summaryText = `üìã *–°—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–æ –∑–∞–∫–∞–∑—É #${orderId}:*\n\n`;
                let hasPending = false;
                confirmations.forEach(conf => {
                    const statusEmoji = {
                        'PENDING': '‚è≥',
                        'CONFIRMED': '‚úÖ',
                        'PARTIAL': '‚ö†Ô∏è',
                        'REJECTED': '‚ùå'
                    };
                    summaryText += `${statusEmoji[conf.status]} ${conf.orderItem.product.name}`;
                    if (conf.status === 'PARTIAL') {
                        summaryText += ` (${conf.confirmedQuantity} —à—Ç.)`;
                    }
                    summaryText += '\n';
                    if (conf.status === 'PENDING') {
                        hasPending = true;
                    }
                });
                if (hasPending) {
                    summaryText += '\n‚ö° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –µ—â–µ –æ–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.';
                }
                else {
                    summaryText += '\n‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!';
                }
                yield this.bot.sendMessage(telegramUserId, summaryText, {
                    parse_mode: 'Markdown'
                });
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error);
            }
        });
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä—É –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
     */
    sendCourierAssignmentNotification(orderId, courierId) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            if (!this.bot)
                return;
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ –∫—É—Ä—å–µ—Ä–µ
                const order = yield prisma_1.default.order.findUnique({
                    where: { id: orderId },
                    include: {
                        user: {
                            select: { name: true, phone_number: true }
                        },
                        items: {
                            include: {
                                product: {
                                    select: { name: true, price: true }
                                }
                            }
                        },
                        courier: {
                            select: { telegram_user_id: true, name: true }
                        }
                    }
                });
                if (!order || !((_a = order.courier) === null || _a === void 0 ? void 0 : _a.telegram_user_id)) {
                    console.warn('–ó–∞–∫–∞–∑ –∏–ª–∏ –∫—É—Ä—å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', { orderId, courierId });
                    return;
                }
                const customerName = order.user.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å';
                const customerPhone = order.user.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω';
                const totalAmount = order.items.reduce((sum, item) => sum + (item.quantity * (item.price || 0)), 0);
                // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ
                let deliveryInfo = '';
                if (order.deliveryType === 'SCHEDULED' && order.scheduledDate) {
                    const deliveryDate = new Date(order.scheduledDate);
                    const formattedDate = deliveryDate.toLocaleDateString('ru-RU', {
                        day: '2-digit',
                        month: '2-digit',
                        year: 'numeric'
                    });
                    const formattedTime = deliveryDate.toLocaleTimeString('ru-RU', {
                        hour: '2-digit',
                        minute: '2-digit'
                    });
                    deliveryInfo = `‚è∞ *–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞:* ${formattedDate} –≤ ${formattedTime}\n`;
                }
                else {
                    deliveryInfo = `üöÄ *–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:* –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ\n`;
                }
                // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                let message = `üöö *–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id}*\n\n`;
                message += `üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* ${customerName}\n`;
                message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${customerPhone}\n`;
                message += `üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* ${order.address}\n`;
                message += deliveryInfo;
                message += `\nüì¶ *–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:*\n`;
                order.items.forEach((item, index) => {
                    const itemTotal = item.quantity * (item.price || 0);
                    message += `${index + 1}. ${item.product.name}\n`;
                    message += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity} —à—Ç.\n`;
                    message += `   –¶–µ–Ω–∞: ${item.price || 0} ‚Ç∏/—à—Ç.\n`;
                    message += `   –°—É–º–º–∞: ${itemTotal} ‚Ç∏\n\n`;
                });
                message += `üí∞ *–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:* ${totalAmount} ‚Ç∏\n\n`;
                message += `üöÄ *–°—Ç–∞—Ç—É—Å:* –ì–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ\n`;
                message += `üì± –ö–æ–≥–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç–µ –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ`;
                // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏
                const keyboard = [
                    [
                        {
                            text: '‚úÖ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
                            callback_data: `courier_delivered:${orderId}:${courierId}`
                        }
                    ]
                ];
                console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä—É:', {
                    courierId,
                    courierTelegram: order.courier.telegram_user_id,
                    orderId,
                    totalAmount
                });
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                yield this.bot.sendMessage(order.courier.telegram_user_id, message, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
                console.log(`üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ #${orderId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫—É—Ä—å–µ—Ä—É ${order.courier.name || courierId}`);
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä—É:', error);
                throw error;
            }
        });
    }
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç –∫—É—Ä—å–µ—Ä–∞
     */
    handleCourierDelivery(orderId, courierId, query) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            if (!this.bot)
                return;
            console.log('üöö –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:', {
                orderId,
                courierId,
                from: ((_a = query.from) === null || _a === void 0 ? void 0 : _a.username) || ((_b = query.from) === null || _b === void 0 ? void 0 : _b.id)
            });
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ–º—É –∫—É—Ä—å–µ—Ä—É
                const order = yield prisma_1.default.order.findUnique({
                    where: { id: orderId },
                    select: {
                        id: true,
                        courierId: true,
                        statuses: {
                            orderBy: { createdAt: 'desc' },
                            take: 1,
                            select: { status: true }
                        }
                    }
                });
                if (!order) {
                    yield this.bot.answerCallbackQuery(query.id, {
                        text: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω',
                        show_alert: true
                    });
                    return;
                }
                if (order.courierId !== courierId) {
                    yield this.bot.answerCallbackQuery(query.id, {
                        text: '–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞–º',
                        show_alert: true
                    });
                    return;
                }
                const currentStatus = (_c = order.statuses[0]) === null || _c === void 0 ? void 0 : _c.status;
                if (currentStatus === 'DELIVERED') {
                    yield this.bot.answerCallbackQuery(query.id, {
                        text: '–ó–∞–∫–∞–∑ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π',
                        show_alert: true
                    });
                    return;
                }
                if (currentStatus !== 'DELIVERING') {
                    yield this.bot.answerCallbackQuery(query.id, {
                        text: '–ú–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ "–í –ø—É—Ç–∏"',
                        show_alert: true
                    });
                    return;
                }
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ DELIVERED
                yield prisma_1.default.orderStatus.create({
                    data: {
                        orderId,
                        status: 'DELIVERED'
                    }
                });
                console.log(`‚úÖ –ó–∞–∫–∞–∑ #${orderId} –æ—Ç–º–µ—á–µ–Ω –∫—É—Ä—å–µ—Ä–æ–º ${courierId} –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π`);
                yield this.bot.answerCallbackQuery(query.id, {
                    text: '‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π!'
                });
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫—É
                if (query.message) {
                    const updatedText = query.message.text + '\n\n‚úÖ *–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!*';
                    yield this.bot.editMessageText(updatedText, {
                        chat_id: query.message.chat.id,
                        message_id: query.message.message_id,
                        parse_mode: 'Markdown'
                    });
                }
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ
                yield this.sendOrderStatusUpdate(orderId, 'DELIVERED');
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:', error);
                if (this.bot) {
                    yield this.bot.answerCallbackQuery(query.id, {
                        text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
                        show_alert: true
                    });
                }
            }
        });
    }
}
exports.TelegramNotificationService = TelegramNotificationService;
exports.telegramService = new TelegramNotificationService();
