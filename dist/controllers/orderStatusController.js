"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addOrderStatus = exports.getOrderStatuses = exports.updateOrderStatus = void 0;
const client_1 = require("@prisma/client");
const telegramService_1 = require("../services/telegramService");
const prisma = new client_1.PrismaClient();
// –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (PUT /api/orders/:id/status)
const updateOrderStatus = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { id } = req.params;
    const { status } = req.body;
    if (!req.user || req.user.role !== 'ADMIN')
        return res.status(403).json({ message: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    const allowed = ['NEW', 'WAITING_PAYMENT', 'PREPARING', 'DELIVERING', 'DELIVERED', 'CANCELLED'];
    if (!allowed.includes(status)) {
        return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å' });
    }
    const order = yield prisma.order.findUnique({ where: { id: Number(id) } });
    if (!order)
        return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
    yield prisma.orderStatus.create({ data: { orderId: Number(id), status } });
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
    try {
        console.log(`üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #${id} –Ω–∞ ${status}`);
        yield telegramService_1.telegramService.sendOrderStatusNotification(Number(id), status);
    }
    catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ:', error);
    }
    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ DELIVERED, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É
    if (status === 'DELIVERED') {
        try {
            console.log(`üìä –ó–∞–∫–∞–∑ #${id} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏`);
            yield telegramService_1.telegramService.sendRatingRequest(Number(id));
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ü–µ–Ω–∫—É:', error);
        }
    }
    res.json({ success: true });
});
exports.updateOrderStatus = updateOrderStatus;
// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–∞
const getOrderStatuses = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { orderId } = req.params;
    const statuses = yield prisma.orderStatus.findMany({
        where: { orderId: Number(orderId) },
        orderBy: { createdAt: 'asc' },
        select: { id: true, status: true, createdAt: true },
    });
    res.json(statuses);
});
exports.getOrderStatuses = getOrderStatuses;
// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (—Ç–æ–ª—å–∫–æ ADMIN)
const addOrderStatus = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { orderId } = req.params;
    const { status } = req.body;
    if (!req.user || req.user.role !== 'ADMIN')
        return res.status(403).json({ message: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    if (!status)
        return res.status(400).json({ message: 'status –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    const order = yield prisma.order.findUnique({ where: { id: Number(orderId) } });
    if (!order)
        return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    const newStatus = yield prisma.orderStatus.create({
        data: {
            orderId: order.id,
            status,
        },
    });
    res.status(201).json(newStatus);
});
exports.addOrderStatus = addOrderStatus;
