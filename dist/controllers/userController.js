"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMe = exports.updateMe = exports.changeUserRole = exports.getAllUsers = void 0;
const client_1 = require("@prisma/client");
const apiResponse_1 = require("../utils/apiResponse");
const errorHandler_1 = require("../middlewares/errorHandler");
const prisma = new client_1.PrismaClient();
// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
const getAllUsers = (req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { page, limit, sortBy, sortOrder } = apiResponse_1.PaginationUtil.parseQuery(req.query);
        const { skip, take } = apiResponse_1.PaginationUtil.getSkipTake(page, limit);
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–æ–ª–∏
        const roleFilter = req.query.role;
        const searchFilter = req.query.search;
        const whereClause = {};
        if (roleFilter) {
            whereClause.role = roleFilter;
        }
        if (searchFilter) {
            whereClause.OR = [
                { name: { contains: searchFilter, mode: 'insensitive' } },
                { phone_number: { contains: searchFilter } },
                { telegram_user_id: { contains: searchFilter } }
            ];
        }
        const total = yield prisma.user.count({ where: whereClause });
        const users = yield prisma.user.findMany({
            where: whereClause,
            skip,
            take,
            orderBy: apiResponse_1.PaginationUtil.buildOrderBy(sortBy || 'id', sortOrder || 'desc'),
            select: {
                id: true,
                telegram_user_id: true,
                name: true,
                phone_number: true,
                role: true,
                _count: {
                    select: {
                        orders: true,
                        deliveredOrders: true
                    }
                }
            }
        });
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤
        const usersWithStats = yield Promise.all(users.map((user) => __awaiter(void 0, void 0, void 0, function* () {
            if (user.role === 'COURIER') {
                const activeOrders = yield prisma.order.count({
                    where: {
                        courierId: user.id,
                        statuses: {
                            some: {
                                status: {
                                    in: ['CONFIRMED', 'PREPARING', 'READY', 'DELIVERING']
                                }
                            }
                        }
                    }
                });
                return Object.assign(Object.assign({}, user), { stats: {
                        totalOrders: user._count.orders,
                        deliveredOrders: user._count.deliveredOrders,
                        activeOrders
                    } });
            }
            return Object.assign(Object.assign({}, user), { stats: {
                    totalOrders: user._count.orders
                } });
        })));
        apiResponse_1.ApiResponseUtil.paginated(res, usersWithStats, {
            page: page || 1,
            limit: limit || 20,
            total
        });
    }
    catch (error) {
        next(error);
    }
});
exports.getAllUsers = getAllUsers;
// –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
const changeUserRole = (req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { id } = req.params;
        const { role } = req.body;
        const userId = parseInt(id);
        if (isNaN(userId)) {
            throw new errorHandler_1.AppError('–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 400);
        }
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ–ª–∏
        const allowedRoles = ['CUSTOMER', 'COURIER', 'ADMIN'];
        if (!allowedRoles.includes(role)) {
            throw new errorHandler_1.AppError(`–†–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–æ–π –∏–∑: ${allowedRoles.join(', ')}`, 400);
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = yield prisma.user.findUnique({
            where: { id: userId },
            select: { id: true, role: true, name: true, telegram_user_id: true }
        });
        if (!user) {
            throw new errorHandler_1.AppError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 404);
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
        if (user.role === role) {
            throw new errorHandler_1.AppError(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —Ä–æ–ª—å ${role}`, 400);
        }
        const oldRole = user.role;
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const updatedUser = yield prisma.user.update({
            where: { id: userId },
            data: { role },
            select: { id: true, role: true, name: true, telegram_user_id: true }
        });
        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        // (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—é –∫—ç—à–∞, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        console.log(`üë§ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∏–∑–º–µ–Ω–µ–Ω–∞ —Å ${oldRole} –Ω–∞ ${role} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${req.user.id}`);
        apiResponse_1.ApiResponseUtil.success(res, {
            userId: updatedUser.id,
            oldRole,
            newRole: updatedUser.role,
            updatedAt: new Date().toISOString(),
            user: {
                id: updatedUser.id,
                name: updatedUser.name,
                telegram_user_id: updatedUser.telegram_user_id
            }
        }, '–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞');
    }
    catch (error) {
        next(error);
    }
});
exports.changeUserRole = changeUserRole;
// PATCH /api/user/me ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
const updateMe = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    if (!req.user)
        return res.status(401).json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
    const { name, phone_number } = req.body;
    if (!name && !phone_number)
        return res.status(400).json({ message: '–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å name –∏–ª–∏ phone_number' });
    const updated = yield prisma.user.update({
        where: { id: req.user.id },
        data: Object.assign(Object.assign({}, (name !== undefined ? { name } : {})), (phone_number !== undefined ? { phone_number } : {}))
    });
    res.json({ id: updated.id, telegram_user_id: updated.telegram_user_id, role: updated.role, phone_number: updated.phone_number, name: updated.name });
});
exports.updateMe = updateMe;
const getMe = (req, res) => {
    if (!req.user)
        return res.status(401).json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
    const { id, telegram_user_id, role, phone_number, name } = req.user;
    res.json({ id, telegram_user_id, role, phone_number, name });
};
exports.getMe = getMe;
